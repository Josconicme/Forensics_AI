# src/reporting/report_generator.py
"""
Report Generator - Creates forensic analysis reports
"""
import json
from datetime import datetime
from pathlib import Path
from typing import List, Dict, Any


class ReportGenerator:
    """Generates comprehensive forensic reports"""
    
    def __init__(self, output_dir: str = "./output/reports"):
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(parents=True, exist_ok=True)
    
    def generate_markdown_report(
        self,
        findings: List[Dict[str, Any]],
        evidence_store=None,
        timeline: List[Dict[str, Any]] = None,
        summary_stats: Dict[str, Any] = None,
        case_name: str = "Forensic Investigation"
    ) -> str:
        """Generate markdown report"""
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"forensic_report_{timestamp}.md"
        filepath = self.output_dir / filename
        
        with open(filepath, 'w', encoding='utf-8') as f:
            # Header
            f.write(f"# {case_name}\n\n")
            f.write(f"**Report Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
            f.write("---\n\n")
            
            # Executive Summary
            f.write("## Executive Summary\n\n")
            if summary_stats:
                f.write(f"- **Total Findings:** {summary_stats.get('total_findings', 0)}\n")
                f.write(f"- **Evidence Analyzed:** {summary_stats.get('evidence_analyzed', 0)} items\n")
                f.write(f"- **Average Confidence:** {summary_stats.get('average_confidence', 0):.1%}\n")
                f.write(f"- **High Priority Findings:** {summary_stats.get('high_severity_count', 0)}\n\n")
                
                if 'findings_by_severity' in summary_stats:
                    f.write("**Findings by Severity:**\n")
                    for severity, count in summary_stats['findings_by_severity'].items():
                        icon = self._get_severity_icon(severity)
                        f.write(f"- {icon} {severity.upper()}: {count}\n")
                    f.write("\n")
            
            f.write("---\n\n")
            
            # Critical Findings
            critical_findings = [f for f in findings if self._get_finding_severity(f).lower() == 'critical']
            if critical_findings:
                f.write("## üî¥ CRITICAL FINDINGS\n\n")
                f.write("**‚ö†Ô∏è IMMEDIATE ACTION REQUIRED**\n\n")
                for finding in critical_findings:
                    self._write_finding(f, finding)
                f.write("---\n\n")
            
            # High Priority Findings
            high_findings = [f for f in findings if self._get_finding_severity(f).lower() == 'high']
            if high_findings:
                f.write("## üü† HIGH PRIORITY FINDINGS\n\n")
                for finding in high_findings:
                    self._write_finding(f, finding)
                f.write("---\n\n")
            
            # Medium Findings
            medium_findings = [f for f in findings if self._get_finding_severity(f).lower() == 'medium']
            if medium_findings:
                f.write("## üü° MEDIUM PRIORITY FINDINGS\n\n")
                for finding in medium_findings:
                    self._write_finding(f, finding)
                f.write("---\n\n")
            
            # Low/Info Findings
            low_findings = [f for f in findings if self._get_finding_severity(f).lower() in ['low', 'info']]
            if low_findings:
                f.write("## üü¢ INFORMATIONAL FINDINGS\n\n")
                for finding in low_findings:
                    self._write_finding(f, finding)
                f.write("---\n\n")
            
            # Timeline
            if timeline:
                f.write("## Timeline\n\n")
                for event in timeline[-20:]:  # Last 20 events
                    ts = event.get('timestamp')
                    if isinstance(ts, str):
                        ts_str = ts
                    else:
                        ts_str = ts.strftime('%Y-%m-%d %H:%M:%S') if ts else 'Unknown'
                    f.write(f"- **{ts_str}**: {event.get('description', 'Unknown event')}\n")
                f.write("\n---\n\n")
            
            # Recommendations
            f.write("## Recommendations\n\n")
            self._write_recommendations(f, findings)
            
            # Footer
            f.write("\n---\n\n")
            f.write("*This report was generated by AI-Powered Digital Forensics System*\n")
        
        print(f"[ReportGenerator] Report generated: {filepath}")
        return str(filepath)
    
    def generate_json_report(
        self,
        findings: List[Dict[str, Any]],
        timeline: List[Dict[str, Any]] = None,
        summary_stats: Dict[str, Any] = None
    ) -> str:
        """Generate JSON report"""
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"forensic_report_{timestamp}.json"
        filepath = self.output_dir / filename
        
        report_data = {
            'metadata': {
                'generated_at': datetime.now().isoformat(),
                'report_version': '1.0',
                'total_findings': len(findings)
            },
            'summary_statistics': summary_stats or {},
            'findings': findings,
            'timeline': timeline or []
        }
        
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(report_data, f, indent=2, default=str)
        
        print(f"[ReportGenerator] JSON report generated: {filepath}")
        return str(filepath)
    
    def _get_finding_severity(self, finding: Dict[str, Any]) -> str:
        """Get severity from finding dict"""
        if isinstance(finding, dict):
            return finding.get('severity', 'unknown')
        else:
            return getattr(finding, 'severity', 'unknown')
    
    def _get_severity_icon(self, severity: str) -> str:
        """Get emoji icon for severity level"""
        severity_lower = str(severity).lower()
        icons = {
            'critical': 'üî¥',
            'high': 'üü†',
            'medium': 'üü°',
            'low': 'üü¢',
            'info': '‚ÑπÔ∏è'
        }
        return icons.get(severity_lower, '‚ö™')
    
    def _write_finding(self, f, finding: Dict[str, Any]):
        """Write a single finding to markdown"""
        # Handle both dict and object
        if isinstance(finding, dict):
            title = finding.get('title', 'Unknown Finding')
            description = finding.get('description', 'No description')
            severity = finding.get('severity', 'unknown')
            confidence = finding.get('confidence', 0)
            agent = finding.get('agent_name', 'Unknown')
            mitre_techniques = finding.get('mitre_techniques', [])
            iocs = finding.get('iocs', [])
            remediation = finding.get('remediation', [])
        else:
            title = getattr(finding, 'title', 'Unknown Finding')
            description = getattr(finding, 'description', 'No description')
            severity = getattr(finding, 'severity', 'unknown')
            confidence = getattr(finding, 'confidence', 0)
            agent = getattr(finding, 'agent_name', 'Unknown')
            mitre_techniques = getattr(finding, 'mitre_techniques', [])
            iocs = getattr(finding, 'iocs', [])
            remediation = getattr(finding, 'remediation', [])
        
        icon = self._get_severity_icon(severity)
        
        f.write(f"### {icon} {title}\n\n")
        f.write(f"**Severity:** {severity.upper()} | **Confidence:** {confidence:.0%} | **Agent:** {agent}\n\n")
        f.write(f"{description}\n\n")
        
        if mitre_techniques:
            f.write(f"**MITRE ATT&CK Techniques:** {', '.join(mitre_techniques)}\n\n")
        
        if iocs:
            f.write(f"**Indicators of Compromise (IOCs):**\n")
            for ioc in iocs[:10]:  # Limit to 10
                f.write(f"- `{ioc}`\n")
            f.write("\n")
        
        if remediation:
            f.write(f"**Recommended Actions:**\n")
            for action in remediation:
                f.write(f"- {action}\n")
            f.write("\n")
        
        f.write("\n")
    
    def _write_recommendations(self, f, findings: List[Dict[str, Any]]):
        """Write overall recommendations"""
        critical_count = sum(1 for finding in findings if self._get_finding_severity(finding).lower() == 'critical')
        high_count = sum(1 for finding in findings if self._get_finding_severity(finding).lower() == 'high')
        
        if critical_count > 0:
            f.write("### üö® CRITICAL PRIORITY\n\n")
            f.write(f"- **{critical_count} critical findings require immediate attention**\n")
            f.write("- Activate incident response team immediately\n")
            f.write("- Consider isolating affected systems\n")
            f.write("- Begin containment procedures\n\n")
        
        if high_count > 0:
            f.write("### ‚ö†Ô∏è HIGH PRIORITY\n\n")
            f.write(f"- **{high_count} high priority findings identified**\n")
            f.write("- Review and investigate within 24 hours\n")
            f.write("- Implement recommended security controls\n")
            f.write("- Document all findings and actions taken\n\n")
        
        f.write("### üìã GENERAL RECOMMENDATIONS\n\n")
        f.write("- Preserve all evidence for potential legal proceedings\n")
        f.write("- Maintain detailed chain of custody documentation\n")
        f.write("- Conduct thorough post-incident analysis\n")
        f.write("- Update security policies and procedures based on findings\n")
        f.write("- Provide security awareness training to staff\n")
        f.write("- Schedule follow-up security assessment\n")